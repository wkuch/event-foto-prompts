// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  type        String   @default("general")
  description String?  @db.Text
  settings    Json?
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompts Prompt[]
  uploads Upload[]

  @@index([slug])
  @@index([userId])
}

model Prompt {
  id          String   @id @default(cuid())
  text        String   @db.Text
  eventId     String
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  maxUploads  Int?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploads Upload[]

  @@index([eventId])
  @@index([eventId, order])
}

model Upload {
  id          String   @id @default(cuid())
  eventId     String
  promptId    String?
  fileName    String
  originalName String?
  fileSize    Int
  mimeType    String
  r2Key       String
  r2Url       String
  caption     String?  @db.Text
  uploaderName String?
  uploaderInfo Json?
  metadata    Json?
  isApproved  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  event  Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  prompt Prompt? @relation(fields: [promptId], references: [id], onDelete: SetNull)

  @@index([eventId])
  @@index([promptId])
  @@index([createdAt])
}

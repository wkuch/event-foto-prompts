// Test schema for SQLite
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-test"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  type        String   @default("general")
  description String?
  settings    String?  // JSON as string in SQLite
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompts Prompt[]
  uploads Upload[]
}

model Prompt {
  id          String   @id @default(cuid())
  text        String
  eventId     String
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  maxUploads  Int?
  settings    String?  // JSON as string in SQLite
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploads Upload[]
}

model Upload {
  id          String   @id @default(cuid())
  eventId     String
  promptId    String?
  fileName    String
  originalName String?
  fileSize    Int
  mimeType    String
  r2Key       String
  r2Url       String
  caption     String?
  uploaderName String?
  uploaderInfo String?  // JSON as string in SQLite
  metadata    String?   // JSON as string in SQLite
  isApproved  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  event  Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  prompt Prompt? @relation(fields: [promptId], references: [id], onDelete: SetNull)
}